generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified Boolean        @default(false) @map("email_verified")
  image         String?
  role          String         @default("user") // 用户角色: admin, user
  banned        Boolean        @default(false) // 是否被禁用
  banReason     String?        @map("ban_reason") // 禁用原因
  banExpires    DateTime?      @map("ban_expires") // 禁用到期时间
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  archives      Archive[]
  callHistories CallHistory[]
  pkSessions    PKSession[]
  pointRecords  PointRecord[]
  pointRules    PointRule[]
  redemptions   Redemption[]
  sessions      Session[]
  storeItems    StoreItem[]
  studentGroups StudentGroup[]
  studentTags   StudentTag[]
  students      Student[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Student {
  id            String               @id @default(cuid())
  name          String
  studentNo     String               @unique @map("student_no")
  gender        Gender
  phone         String?
  parentPhone   String?              @map("parent_phone")
  points        Int                  @default(0)
  avatar        String?
  notes         String?
  isArchived    Boolean              @default(false) @map("is_archived")
  archiveId     String?              @map("archive_id") // 归档记录ID
  archivedAt    DateTime?            @map("archived_at") // 归档时间
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  userId        String               @map("user_id")
  archive       Archive?             @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  callHistories  CallHistory[]
  pkParticipants PKParticipant[]
  pointRecords   PointRecord[]
  redemptions    Redemption[]
  groupMembers   StudentGroupMember[]
  tagRelations   StudentTagRelation[]
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([studentNo])
  @@index([points])
  @@map("students")
}

model StudentGroup {
  id          String               @id @default(cuid())
  name        String
  description String?
  color       String?
  isArchived  Boolean              @default(false) @map("is_archived")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  userId      String               @map("user_id")
  archiveId   String?              @map("archive_id") // 归档记录ID
  archivedAt  DateTime?            @map("archived_at") // 归档时间
  archive     Archive?             @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  members     StudentGroupMember[]
  pkParticipants PKParticipant[]
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("student_groups")
}

model StudentGroupMember {
  id        String       @id @default(cuid())
  studentId String       @map("student_id")
  groupId   String       @map("group_id")
  group     StudentGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, groupId])
  @@map("student_group_members")
}

model StudentTag {
  id        String               @id @default(cuid())
  name      String
  color     String
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")
  userId    String               @map("user_id")
  relations StudentTagRelation[]
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("student_tags")
}

model StudentTagRelation {
  id        String     @id @default(cuid())
  studentId String     @map("student_id")
  tagId     String     @map("tag_id")
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tag       StudentTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([studentId, tagId])
  @@map("student_tag_relations")
}

model PointRule {
  id           String        @id @default(cuid())
  name         String
  points       Int
  type         PointType
  category     String?
  description  String?
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  userId       String        @map("user_id")
  archiveId    String?       @map("archive_id") // 归档记录ID
  archivedAt   DateTime?     @map("archived_at") // 归档时间
  archive      Archive?      @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  pointRecords PointRecord[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("point_rules")
}

model PointRecord {
  id         String     @id @default(cuid())
  points     Int
  reason     String
  type       PointType
  createdAt  DateTime   @default(now()) @map("created_at")
  studentId  String     @map("student_id")
  userId     String     @map("user_id")
  ruleId     String?    @map("rule_id")
  archiveId  String?    @map("archive_id") // 归档记录ID
  archivedAt DateTime?  @map("archived_at") // 归档时间
  archive    Archive?   @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  rule       PointRule? @relation(fields: [ruleId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([userId])
  @@index([createdAt])
  @@map("point_records")
}

model StoreItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  cost        Int
  image       String?
  stock       Int?
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  userId      String       @map("user_id")
  sortOrder   Int          @default(0) @map("sort_order")
  type        ItemType     @default(VIRTUAL)
  archiveId   String?      @map("archive_id") // 归档记录ID
  archivedAt  DateTime?    @map("archived_at") // 归档时间
  archive     Archive?     @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  redemptions Redemption[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isActive])
  @@map("store_items")
}

model Redemption {
  id          String           @id @default(cuid())
  cost        Int
  status      RedemptionStatus @default(PENDING)
  notes       String?
  redeemedAt  DateTime         @default(now()) @map("redeemed_at")
  fulfilledAt DateTime?        @map("fulfilled_at")
  studentId   String           @map("student_id")
  itemId      String           @map("item_id")
  userId      String           @map("user_id")
  archiveId   String?          @map("archive_id") // 归档记录ID
  archivedAt  DateTime?        @map("archived_at") // 归档时间
  archive     Archive?         @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  item        StoreItem        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([userId])
  @@index([status])
  @@map("redemptions")
}

model CallHistory {
  id        String   @id @default(cuid())
  mode      CallMode
  calledAt  DateTime @default(now()) @map("called_at")
  studentId String?  @map("student_id")
  userId    String   @map("user_id")
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([calledAt])
  @@map("call_histories")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model PKSession {
  id           String          @id @default(cuid())
  userId       String          @map("user_id")
  mode         PKMode
  topic        String?
  rewardPoints Int             @default(0) @map("reward_points")
  winnerId     String?         @map("winner_id")
  winnerType   PKWinnerType?   @map("winner_type")
  status       PKStatus        @default(ONGOING)
  duration     Int?
  startedAt    DateTime        @default(now()) @map("started_at")
  finishedAt   DateTime?       @map("finished_at")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  archiveId    String?         @map("archive_id") // 归档记录ID
  archivedAt   DateTime?       @map("archived_at") // 归档时间
  archive      Archive?        @relation(fields: [archiveId], references: [id], onDelete: SetNull)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants PKParticipant[]

  @@index([userId])
  @@index([startedAt])
  @@map("pk_sessions")
}

model PKParticipant {
  id        String       @id @default(cuid())
  sessionId String       @map("session_id")
  type      PKEntityType
  studentId String?      @map("student_id")
  groupId   String?      @map("group_id")
  isWinner  Boolean      @default(false) @map("is_winner")
  createdAt DateTime     @default(now()) @map("created_at")
  group     StudentGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  session   PKSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student   Student?     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("pk_participants")
}

enum Gender {
  MALE
  FEMALE
}

enum PointType {
  ADD
  SUBTRACT
  RESET
}

enum ItemType {
  VIRTUAL
  PHYSICAL
  PRIVILEGE
}

enum RedemptionStatus {
  PENDING
  FULFILLED
  CANCELLED
}

enum CallMode {
  INDIVIDUAL
  GROUP
  RANDOM
}

enum PKMode {
  INDIVIDUAL
  GROUP
  RANDOM
}

enum PKStatus {
  ONGOING
  FINISHED
  CANCELLED
}

enum PKWinnerType {
  STUDENT
  GROUP
}

enum PKEntityType {
  STUDENT
  GROUP
}

// 归档类型枚举
enum ArchiveType {
  STUDENT           // 学生归档
  POINT_RECORD      // 积分记录归档
  REDEMPTION        // 兑换记录归档
  POINT_RULE        // 积分规则归档
  STORE_ITEM        // 商城商品归档
  STUDENT_GROUP     // 学生分组归档
  PK_SESSION        // PK会话归档
}

// 归档记录模型
model Archive {
  id          String      @id @default(cuid())
  type        ArchiveType // 归档类型
  reason      String?     // 归档原因
  description String?     // 归档描述
  itemCount   Int         @default(0) @map("item_count") // 归档项目数量
  metadata    Json?       // 额外元数据(JSON格式,存储统计信息等)
  createdAt   DateTime    @default(now()) @map("created_at")
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 关联的归档数据
  students      Student[]
  pointRecords  PointRecord[]
  redemptions   Redemption[]
  pointRules    PointRule[]
  storeItems    StoreItem[]
  studentGroups StudentGroup[]
  pkSessions    PKSession[]

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("archives")
}
