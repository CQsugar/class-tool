# ==============================================
# 班主任班级管理平台 - 生产环境 Docker Compose 配置
# ==============================================

services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:16-alpine
    container_name: class-tool-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-class_tool}
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - 'postgres'
      - '-c'
      - 'max_connections=200'
      - '-c'
      - 'shared_buffers=256MB'
      - '-c'
      - 'effective_cache_size=1GB'

  # Next.js 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: class-tool-app-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-class_tool}?schema=public
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      PORT: ${PORT:-3000}
    volumes:
      - uploads_data:/app/uploads
    ports:
      - '${APP_PORT:-3000}:3000'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.class-tool.rule=Host(`${DOMAIN:-localhost}`)'
      - 'traefik.http.services.class-tool.loadbalancer.server.port=3000'

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: class-tool-nginx-prod
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - '80:80'
      - '443:443'
    networks:
      - app-network
    profiles:
      - with-nginx

  # Redis 缓存服务（可选，用于会话存储和缓存）
  redis:
    image: redis:7-alpine
    container_name: class-tool-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - with-redis

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
