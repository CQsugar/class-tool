# ==============================================
# 班主任班级管理平台 - 生产环境 Docker Compose 配置
# ==============================================

services:
  # Traefik 反向代理和自动 HTTPS
  traefik:
    image: traefik:v3
    container_name: class-tool-traefik
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080' # Traefik Dashboard (可选)
    volumes:
      # Docker socket 用于自动发现服务
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Traefik 配置文件
      - ./traefik.toml:/etc/traefik/traefik.toml:ro
      # Let's Encrypt 证书存储
      - ${DATA_DIR:-./data}/letsencrypt:/letsencrypt
    networks:
      - app-network
    labels:
      # 启用 Traefik 自身管理
      traefik.enable: true
      # 指定使用的 Docker 网络
      traefik.docker.network: class-tool_app-network
      # Dashboard 配置 - 使用固定的 traefik 子域名
      traefik.http.routers.traefik.rule: Host(`${TRAEFIK_DOMAIN:-localhost}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.tls.certresolver: letsencrypt
      traefik.http.routers.traefik.service: 'api@internal'
      # Dashboard 认证 (使用环境变量配置)
      # 修改密码: 在 .env 中设置 TRAEFIK_AUTH_USERS
      # 生成命令: echo $(htpasswd -nb admin 新密码) | sed -e s/\\$/\\$\\$/g
      traefik.http.routers.traefik.middlewares: auth
      traefik.http.middlewares.auth.basicauth.users: ${TRAEFIK_AUTH_USERS:-admin:$$apr1$$Tf9lEeNC$$mlz/VTAz7Z5p7c9KOGrKu0}

  # PostgreSQL 数据库服务
  postgres:
    image: postgres:16-alpine
    container_name: class-tool-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-class_tool}
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=C'
    volumes:
      # 数据库数据持久化 - 映射到本地目录
      - ${DATA_DIR:-./data}/postgres:/var/lib/postgresql/data
      # 备份目录
      - ./backups:/backups
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - 'postgres'
      - '-c'
      - 'max_connections=200'
      - '-c'
      - 'shared_buffers=256MB'
      - '-c'
      - 'effective_cache_size=1GB'

  # Next.js 应用服务
  app:
    # 支持两种方式：1) 本地构建 2) 使用预构建镜像
    # 使用预构建镜像时，设置 DOCKER_IMAGE 环境变量
    # 例如: DOCKER_IMAGE=class-tool:latest
    image: ${DOCKER_IMAGE:-class-tool:latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: class-tool-app-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-class_tool}?schema=public
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-https://${DOMAIN}}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-https://${DOMAIN}}
      PORT: ${PORT:-3000}
    volumes:
      # 上传文件持久化 - 映射到本地目录
      - ${DATA_DIR:-./data}/uploads:/app/uploads
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://127.0.0.1:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # 启用 Traefik
      traefik.enable: true
      # 指定使用的 Docker 网络
      traefik.docker.network: class-tool_app-network

      # 主路由规则 - 使用环境变量 DOMAIN
      traefik.http.routers.class-tool.rule: Host(`${DOMAIN:-localhost}`)
      traefik.http.routers.class-tool.entrypoints: websecure
      traefik.http.routers.class-tool.tls.certresolver: letsencrypt
      traefik.http.routers.class-tool.middlewares: security-headers

      # 重定向路由 - 使用环境变量 ROOT_DOMAIN (根域名重定向到 www)
      traefik.http.routers.class-tool-redirect.rule: Host(`${ROOT_DOMAIN:-}`)
      traefik.http.routers.class-tool-redirect.entrypoints: websecure
      traefik.http.routers.class-tool-redirect.tls.certresolver: letsencrypt
      traefik.http.routers.class-tool-redirect.middlewares: redirect-to-www

      # HTTP 到 HTTPS 重定向（所有域名）
      traefik.http.routers.class-tool-http.rule: Host(`${DOMAIN:-localhost}`) || Host(`${ROOT_DOMAIN:-}`)
      traefik.http.routers.class-tool-http.entrypoints: web
      traefik.http.routers.class-tool-http.middlewares: redirect-to-https

      # 负载均衡配置
      traefik.http.services.class-tool.loadbalancer.server.port: 3000

      # 中间件：重定向到 www (使用环境变量)
      traefik.http.middlewares.redirect-to-www.redirectregex.regex: ^https://${ROOT_DOMAIN:-ccsong.top}/(.*)
      traefik.http.middlewares.redirect-to-www.redirectregex.replacement: https://${DOMAIN:-www.ccsong.top}/$${1}
      traefik.http.middlewares.redirect-to-www.redirectregex.permanent: true

      # 中间件：HTTP 到 HTTPS
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      traefik.http.middlewares.redirect-to-https.redirectscheme.permanent: true

      # 安全头部中间件
      traefik.http.middlewares.security-headers.headers.stsSeconds: 31536000
      traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains: true
      traefik.http.middlewares.security-headers.headers.stsPreload: true
      traefik.http.middlewares.security-headers.headers.forceSTSHeader: true

# 注意: 使用本地目录映射,不再需要 Docker volumes
# 所有数据将存储在 ${DATA_DIR:-./data} 目录下
# - postgres: ${DATA_DIR}/postgres
# - uploads: ${DATA_DIR}/uploads
# - letsencrypt: ${DATA_DIR}/letsencrypt (SSL 证书)

networks:
  app-network:
    driver: bridge
